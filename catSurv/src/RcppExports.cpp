// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <RcppGSL.h>
#include <Rcpp.h>

using namespace Rcpp;

// probability
std::vector<double> probability(S4 cat_df, NumericVector theta, IntegerVector question);
RcppExport SEXP catSurv_probability(SEXP cat_dfSEXP, SEXP thetaSEXP, SEXP questionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< S4 >::type cat_df(cat_dfSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type question(questionSEXP);
    rcpp_result_gen = Rcpp::wrap(probability(cat_df, theta, question));
    return rcpp_result_gen;
END_RCPP
}
// likelihood
double likelihood(S4 cat_df, double t);
RcppExport SEXP catSurv_likelihood(SEXP cat_dfSEXP, SEXP tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< S4 >::type cat_df(cat_dfSEXP);
    Rcpp::traits::input_parameter< double >::type t(tSEXP);
    rcpp_result_gen = Rcpp::wrap(likelihood(cat_df, t));
    return rcpp_result_gen;
END_RCPP
}
// prior
double prior(NumericVector x, CharacterVector c, NumericVector p);
RcppExport SEXP catSurv_prior(SEXP xSEXP, SEXP cSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type c(cSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(prior(x, c, p));
    return rcpp_result_gen;
END_RCPP
}
// dLL
double dLL(S4& cat_df, double theta, bool use_prior);
RcppExport SEXP catSurv_dLL(SEXP cat_dfSEXP, SEXP thetaSEXP, SEXP use_priorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< S4& >::type cat_df(cat_dfSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< bool >::type use_prior(use_priorSEXP);
    rcpp_result_gen = Rcpp::wrap(dLL(cat_df, theta, use_prior));
    return rcpp_result_gen;
END_RCPP
}
// d2LL
double d2LL(S4& cat_df, double theta, bool use_prior);
RcppExport SEXP catSurv_d2LL(SEXP cat_dfSEXP, SEXP thetaSEXP, SEXP use_priorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< S4& >::type cat_df(cat_dfSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< bool >::type use_prior(use_priorSEXP);
    rcpp_result_gen = Rcpp::wrap(d2LL(cat_df, theta, use_prior));
    return rcpp_result_gen;
END_RCPP
}
// estimateTheta
double estimateTheta(S4 cat_df);
RcppExport SEXP catSurv_estimateTheta(SEXP cat_dfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< S4 >::type cat_df(cat_dfSEXP);
    rcpp_result_gen = Rcpp::wrap(estimateTheta(cat_df));
    return rcpp_result_gen;
END_RCPP
}
// obsInf
double obsInf(S4 cat_df, double theta, int item);
RcppExport SEXP catSurv_obsInf(SEXP cat_dfSEXP, SEXP thetaSEXP, SEXP itemSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< S4 >::type cat_df(cat_dfSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< int >::type item(itemSEXP);
    rcpp_result_gen = Rcpp::wrap(obsInf(cat_df, theta, item));
    return rcpp_result_gen;
END_RCPP
}
// expectedObsInf
double expectedObsInf(S4 cat_df, int item);
RcppExport SEXP catSurv_expectedObsInf(SEXP cat_dfSEXP, SEXP itemSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< S4 >::type cat_df(cat_dfSEXP);
    Rcpp::traits::input_parameter< int >::type item(itemSEXP);
    rcpp_result_gen = Rcpp::wrap(expectedObsInf(cat_df, item));
    return rcpp_result_gen;
END_RCPP
}
// fisherInf
double fisherInf(S4 cat_df, double theta, int item);
RcppExport SEXP catSurv_fisherInf(SEXP cat_dfSEXP, SEXP thetaSEXP, SEXP itemSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< S4 >::type cat_df(cat_dfSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< int >::type item(itemSEXP);
    rcpp_result_gen = Rcpp::wrap(fisherInf(cat_df, theta, item));
    return rcpp_result_gen;
END_RCPP
}
// fisherTestInfo
double fisherTestInfo(S4 cat_df);
RcppExport SEXP catSurv_fisherTestInfo(SEXP cat_dfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< S4 >::type cat_df(cat_dfSEXP);
    rcpp_result_gen = Rcpp::wrap(fisherTestInfo(cat_df));
    return rcpp_result_gen;
END_RCPP
}
// estimateSE
double estimateSE(S4 cat_df);
RcppExport SEXP catSurv_estimateSE(SEXP cat_dfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< S4 >::type cat_df(cat_dfSEXP);
    rcpp_result_gen = Rcpp::wrap(estimateSE(cat_df));
    return rcpp_result_gen;
END_RCPP
}
// expectedPV
double expectedPV(S4 cat_df, int item);
RcppExport SEXP catSurv_expectedPV(SEXP cat_dfSEXP, SEXP itemSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< S4 >::type cat_df(cat_dfSEXP);
    Rcpp::traits::input_parameter< int >::type item(itemSEXP);
    rcpp_result_gen = Rcpp::wrap(expectedPV(cat_df, item));
    return rcpp_result_gen;
END_RCPP
}
// selectItem
List selectItem(S4 cat_df);
RcppExport SEXP catSurv_selectItem(SEXP cat_dfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< S4 >::type cat_df(cat_dfSEXP);
    rcpp_result_gen = Rcpp::wrap(selectItem(cat_df));
    return rcpp_result_gen;
END_RCPP
}
// expectedKL
double expectedKL(S4 cat_df, int item);
RcppExport SEXP catSurv_expectedKL(SEXP cat_dfSEXP, SEXP itemSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< S4 >::type cat_df(cat_dfSEXP);
    Rcpp::traits::input_parameter< int >::type item(itemSEXP);
    rcpp_result_gen = Rcpp::wrap(expectedKL(cat_df, item));
    return rcpp_result_gen;
END_RCPP
}
// likelihoodKL
double likelihoodKL(S4 cat_df, int item);
RcppExport SEXP catSurv_likelihoodKL(SEXP cat_dfSEXP, SEXP itemSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< S4 >::type cat_df(cat_dfSEXP);
    Rcpp::traits::input_parameter< int >::type item(itemSEXP);
    rcpp_result_gen = Rcpp::wrap(likelihoodKL(cat_df, item));
    return rcpp_result_gen;
END_RCPP
}
// posteriorKL
double posteriorKL(S4 cat_df, int item);
RcppExport SEXP catSurv_posteriorKL(SEXP cat_dfSEXP, SEXP itemSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< S4 >::type cat_df(cat_dfSEXP);
    Rcpp::traits::input_parameter< int >::type item(itemSEXP);
    rcpp_result_gen = Rcpp::wrap(posteriorKL(cat_df, item));
    return rcpp_result_gen;
END_RCPP
}
// lookAhead
List lookAhead(S4 cat_df, int item);
RcppExport SEXP catSurv_lookAhead(SEXP cat_dfSEXP, SEXP itemSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< S4 >::type cat_df(cat_dfSEXP);
    Rcpp::traits::input_parameter< int >::type item(itemSEXP);
    rcpp_result_gen = Rcpp::wrap(lookAhead(cat_df, item));
    return rcpp_result_gen;
END_RCPP
}
// checkStopRules
bool checkStopRules(S4 cat_df);
RcppExport SEXP catSurv_checkStopRules(SEXP cat_dfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< S4 >::type cat_df(cat_dfSEXP);
    rcpp_result_gen = Rcpp::wrap(checkStopRules(cat_df));
    return rcpp_result_gen;
END_RCPP
}
